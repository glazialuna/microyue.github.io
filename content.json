{"pages":[],"posts":[{"title":"聚类|Kmeans","text":"&ensp;&ensp;聚类属于无监督学习，以往的回归、朴素贝叶斯、SVM等都是有类别标签y的，也就是说样例中已经给出了样例的分类。而聚类的样本中却没有给定y，只有特征x，比如假设宇宙中的星星可以表示成三维空间中的点集${x,y,j}$。聚类的目的是找到每个样本x潜在的类别y，并将同类别y的样本x放在一起。比如上面的星星，聚类后结果是一个个星团，星团里面的点相互距离比较近，星团间的星星距离就比较远了。 &ensp;&ensp;在聚类算法中我们有$x^1,x^2,…,x^m$ m个样本点，最后被分为多个类。 k-means算法&ensp;&ensp;k-means算法^1通过不断迭代更新k类质心获取结果，主要流程为下： input:$\\mbox{m个样本}:x^1,x^2,…,x^m$&ensp;&ensp;&ensp;&ensp;&ensp;$\\mbox{k个质心}:\\mu_1,\\mu_2,…\\mu_k$repeat&ensp;&ensp;&ensp;&ensp;$c^i:=\\underset{j}{\\arg\\min} {\\left| {x^i-u_j} \\right|}^2 \\mbox{计算每个样本的类别}$&ensp;&ensp;&ensp;&ensp;$\\mu_j:=\\frac{\\sum_{i=1}^{m}{c^i=j}x^i}{\\sum_{i=1}^{m}{c^i=j}} \\mbox{计算每个类别的质心}$until:$\\mbox{迭代条件}$ &ensp;&ensp;其中，需要保证k-means是收敛的，才能跳出迭代过程。k-means具有特征，完全保证收敛性和局部最优解。 -- 1 : 收敛完整,局部最优 -- &ensp;&ensp;我们定义畸变函数： $$J(c,\\mu)=\\sum_{i=1}^{m}{\\left\\| x^{i}-\\mu_{c^i}\\right\\|}^2$$ &ensp;&ensp;J函数表示每个样本点到其质心的距离平方和。K-means是要将J调整到最小。假设当前J没有达到最小值，那么首先可以固定每个类的质心$\\mu$，调整每个样例的所属的类别$\\c_i$来让J函数减少，同样，固定\\c，调整每个类的质心$\\mu$也可以使J减小。这两个过程就是内循环中使J单调递减的过程。当J递减到最小时，$\\mu$和c也同时收敛。（在理论上，可以有多组不同的$\\mu$和c值能够使得J取得最小值，但这种现象实际上很少见）。 &ensp;&ensp;由于畸变函数J是非凸函数，意味着我们不能保证取得的最小值是全局最小值，也就是说k-means对质心初始位置的选取比较感冒，但一般情况下k-means达到的局部最优已经满足需求。但如果你怕陷入局部最优，那么可以选取不同的初始值跑多遍k-means，然后取其中最小的J对应的$\\mu$和c输出。 -- 2 : k-means和EM的关系 -- &ensp;&ensp;下面累述一下K-means与EM的关系，首先回到初始问题，我们目的是将样本分成k个类，其实说白了就是求每个样例x的隐含类别y，然后利用隐含类别将x归类。 &ensp;&ensp;由于我们事先不知道类别y，那么我们首先可以对每个样例假定一个y吧，但是怎么知道假定的对不对呢？怎么评价假定的好不好呢？我们使用样本的极大似然估计来度量，这里是就是x和y的联合分布P(x,y)了。如果找到的y能够使P(x,y)最大，那么我们找到的y就是样例x的最佳类别了，x顺手就聚类了。 &ensp;&ensp;但是我们第一次指定的y不一定会让P(x,y)最大，而且P(x,y)还依赖于其他未知参数，当然在给定y的情况下，我们可以调整其他参数让P(x,y)最大。但是调整完参数后，我们发现有更好的y可以指定，那么我们重新指定y，然后再计算P(x,y)最大时的参数，反复迭代直至没有更好的y可以指定。 &ensp;&ensp;这个过程有几个难点，第一怎么假定y？是每个样例硬指派一个y还是不同的y有不同的概率，概率如何度量。第二如何估计P(x,y)，P(x,y)还可能依赖很多其他参数，如何调整里面的参数让P(x,y)最大。这些问题在以后的篇章里回答。 &ensp;&ensp;这里只是指出EM的思想，E步就是估计隐含类别y的期望值，M步调整其他参数使得在给定类别y的情况下，极大似然估计P(x,y)能够达到极大值。然后在其他参数确定的情况下，重新估计y，周而复始，直至收敛。 均值漂移聚类 DBSCAN 基于密度聚类GMM 和 EM 凝聚层次聚类 图团体检测","link":"/35f08535.html"},{"title":"CTF-PWN","text":"Ubuntu 运行i386程序 Ubuntu运行32位的程序需要增加libc123sudo dpkg --add-architecture i386sudo apt-get updatesudo apt-get install zlib1g:i386 libstdc++6:i386 libc6:i386 GDB 工具pwngdb 安装123git clone https://github.com/pwndbg/pwndbgcd pwndbgsudo ./setup.sh gdb-peda 安装123git clone https://github.com/longld/peda.git ~/Documents/pedaecho \"source ~/Documents/peda/peda.py\" &gt;&gt; ~/.gdbinitecho \"DONE! debug your program with gdb and enjoy\" gdb-gef 安装1234567# via the install script#下载 `gef.sh` 并执行wget -q -O- https://github.com/hugsy/gef/raw/master/gef.sh | sh# 下载 `gef.py`, 并将其 `source` 写入 `.gdbinit`wget -q -O ~/.gdbinit-gef.py https://github.com/hugsy/gef/raw/master/gef.pyecho source ~/.gdbinit-gef.py &gt;&gt; ~/.gdbinit Pwntools Pwntools 作为ctf的一个重要工具，在构建payload，与服务器交互等有着重要作用 安装pwntools: 1pip install pwntools 注意如果安装出错可以考虑更换安装源 如果pip install --upgrade pwntools提示warning版本过时，可以用pip install pwntools更换 ROPgadget 安装 123git clone https://github.com/JonathanSalwan/ROPgadget.gitcd ROPgadgetsudo python setup.py install 使用：ROPgadget --binary bof-ret2libc --only &quot;pop|ret&quot;","link":"/1f605849.html"},{"title":"Sublime的插件们（一）","text":"前言 看这个创建时间，如果仔细查课表，这时候我本来在上课的，然后小孔说她的blog建好了，然后我就想起来typora不好看，然后我就查了一下下，然后就被sublime吸引了。。。 伟大的sublime sublime真漂亮，高亮真漂亮，长得真漂亮，黑底色真漂亮。。。 而且免费（讲道理要买license）使用。 Sublime官网 当然鼓励购买，虽然license的限制，至少我还不知道是什么~ 吾爱破解 大神的破解，我还没有时间尝试，先把地址马在这里。 Package InstallSublime 有非常多的Package可供安装，安装过程如下： 01 Step 1 安装Package Install“Ctrl+`” 打开控制台（也可以View -&gt; Show Console)在控制台下输入以下语句： 12345678import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 这段代码具体参照安装指南 02 Step 2 安装插件‘ctrl+shift+p’打开Command Palette (Tools)里面输入Package Install ,点击，然后找到需要安装的插件（！注意有两个步骤，不要在command里面搜索插件，我开始就愚蠢地这么做了) 这里注意，可能会需要一点时间寻找package，不过就我的经验来看，没有立刻出现一般就是有点问题了。貌似和Sublime的代理信息有关，因为连接代理就失败，校网也不太行，外网全局才可以。 下载完成了以后就可以快乐地使用啦~如果有对插件的更改问题，可以在Preference -&gt; Package Setting 中设置。 我安装的插件们 Twig:支持swig高亮 MarkdownEdit：支持Markdown高亮 插件官方说明 OmniXX Sublime的调试Sublime的一些操作注意所有默认设置都需要重启sublime来生效！ 偏好设置Preference - Settings 01 default settings其实都有注释，自己看着理解就好了。操作简单，将default的内容复制到user中进行更改。 快捷键sublime 的设置 字体大小： ctrl + 鼠标滚轮 控制台：”ctrl+`” md语言设置 收起同级目录： shift + tab –&gt; 来自Markdown Editing 的 key bind 图片插入：mdi+tab –&gt; MarkdownEditing 链接插入：mdl+tab –&gt; MarkdownEditing 显示overview in html: ctrl+alt+o –&gt; OmniMarkupPreviewer 解决方案：在setting-user中加入12345{ \"renderer_options-MarkdownRenderer\": { \"extensions\": [\"tables\", \"fenced_code\", \"codehilite\"] }}","link":"/358d93b2.html"},{"title":"Git | 小手册","text":"SSH 链接 下载git 工具 绑定用户 git config –global user.name “username”git config –global user.email “usermail@163.com“ SSH 链接 ssh-keygen -t rsa 生成密钥 cd ~/.ssh 查看文件密钥生成（3个文件）复制id_rsa.pub 打开github网页 -&gt; setting -&gt; SSH菜单 -&gt; Add SSH key ,粘贴 id_rsa.pub文件 repository create new one: 123456echo &quot;# Adversarail-model&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/glazialuna/Adversarail-model.gitgit push -u origin master push 12git remote add origin https://github.com/glazialuna/Adversarail-model.gitgit push -u origin master 链接github的repo和pycharm项目到pycharm项目-&gt;setting-&gt;Version Control -&gt; Github添加github账号，验证通过。 然后在当前项目中-&gt;VCS-&gt;Import into Version Control -&gt; Share Project on Github 选择合适的文件commit到项目中即可，之后保持同步只需要VCS-commit同步更新即可 基本操作恢复版本，回退12git reflog master # 查看本地master分支历史变动记录git reset --hard &lt;COMMIT_ID&gt; # 恢复到之前的位置 下载单个文件夹 最简单的方法，到DOWNGIT粘贴链接后下载 问题Git pull 和push 和 clone 等遇到:fatal: early EOF fatal: index-pack failed 方法1：找到.gitconfig 或使用 git config --global 添加一下配置 1234567[core] packedGitLimit = 512m packedGitWindowSize = 512m [pack] deltaCacheSize = 2047m packSizeLimit = 2047m windowMemory = 2047m 方法2：git config --global core.compression 0 数字越小压缩比越小，下载文件越大，取值-1~9 方法3： 12345git config --global core.compression 0 # 修改压缩比git clone --depth 1 &lt;repo_URI&gt;git fetch --unshallow # 与下面选择一种# git fetch --depth=2147483647 git pull --all # 做正常的","link":"/c5ff7834.html"},{"title":"面试总结","text":"协会技术面 找出不同的数字：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 加强版：给定一个非空整数数组，除了两个元素只出现一次以外，其余每个元素均出现两次。找出那两个只出现了一次的元素。 Google SWE intern phone 一个连续的数组，求连续的子数列，满足数列内最大值和最小值不能超过k，这样的子数列最长的长度","link":"/8094e965.html"}],"tags":[{"name":"ML","slug":"ML","link":"/tags/ML/"},{"name":"Sublime","slug":"Sublime","link":"/tags/Sublime/"},{"name":"小手册","slug":"小手册","link":"/tags/小手册/"},{"name":"面试","slug":"面试","link":"/tags/面试/"}],"categories":[{"name":"CTF","slug":"CTF","link":"/categories/CTF/"},{"name":"Skill","slug":"Skill","link":"/categories/Skill/"},{"name":"Tools","slug":"Tools","link":"/categories/Tools/"}]}